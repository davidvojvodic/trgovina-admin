// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Define the Prisma generator for creating the Prisma Client.
generator client {
  provider = "prisma-client-js"
}

// Define the Prisma datasource for your MySQL database.
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL") // The URL to your MySQL database
  relationMode = "prisma"
}

// Define the "Store" table/model.
model Store {
  id          String       @id @default(cuid()) // Unique identifier for the store.
  name        String       // Name of the store.
  userId      String       // User ID associated with the store.
  storeImage  String?
  billboards  Billboard[]  @relation("StoreToBillboard") // Relationship to billboards.
  categories  Category[]  @relation("StoreToCategory") // Relationship to categories.
  sizes       Size[]      @relation("StoreToSize") // Relationship to sizes.
  colors      Color[]     @relation("StoreToColor") // Relationship to colors.
  products    Product[]   @relation("StoreToProduct") // Relationship to products.
  orders      Order[]     @relation("StoreToOrder") // Relationship to orders.
  attributes  Attribute[] @relation("StoreToAttribute")
  createdAt   DateTime    @default(now()) // Timestamp for when the store was created.
  updatedAt   DateTime    @updatedAt // Timestamp for when the store was last updated.
}

// Define the "Billboard" table/model.
model Billboard {
  id          String      @id @default(cuid()) // Unique identifier for the billboard.
  store       Store      @relation("StoreToBillboard", fields: [storeId], references: [id]) // Relationship to the store.
  storeId     String     // ID of the store associated with the billboard.
  name        String     // Name of the billboard.
  label       String?
  isActive    Boolean    @default(true)
  imageUrl    String
  displayOrder Int?
  startDate   DateTime?
  endDate     DateTime?
  tabletImageUrl String?
  mobileImageUrl String?
  categories  Category[] @relation(name: "BillboardToCategory") // Relationship to categories.
  createdAt   DateTime   @default(now()) // Timestamp for when the billboard was created.
  updatedAt   DateTime   @updatedAt // Timestamp for when the billboard was last updated.
}

// Define the "Category" table/model.
model Category {
  id          String      @id @default(cuid()) // Unique identifier for the category.
  name        String     // Name of the category.
  description String?    // Detailed description of the category.
  slug        String     @unique // SEO-friendly URL slug.
  metaDescription String? // SEO meta description.
  parent      Category?  @relation(name: "ParentChild", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade) // Self-relation for parent category.
  parentId    String?    // ID of the parent category for nested categorization, nullable for top-level categories.
  children    Category[] @relation(name: "ParentChild") // Self-relation for child categories.
  store       Store      @relation("StoreToCategory", fields: [storeId], references: [id]) // Relationship to the store.
  billboards  Billboard[] @relation(name: "BillboardToCategory") // Relationship to billboards.
  products    Product[]  @relation("CategoryToProduct") // Relationship to products.
  createdAt   DateTime   @default(now()) // Timestamp for when the category was created.
  updatedAt   DateTime   @updatedAt // Timestamp for when the category was last updated.
}

// Define the "Size" table/model.
model Size {
  id        String   @id @default(cuid()) // Unique identifier for the size.
  store     Store    @relation("StoreToSize", fields: [storeId], references: [id]) // Relationship to the store.
  storeId   String  // ID of the store associated with the size.
  name      String  // Name of the size.
  value     String  // Value associated with the size.
  products  Product[] // Relationship to products.
  createdAt DateTime @default(now()) // Timestamp for when the size was created.
  updatedAt DateTime @updatedAt // Timestamp for when the size was last updated.
}

// Define the "Color" table/model.
model Color {
  id        String   @id @default(cuid()) // Unique identifier for the color.
  store     Store    @relation("StoreToColor", fields: [storeId], references: [id]) // Relationship to the store.
  storeId   String  // ID of the store associated with the color.
  name      String  // Name of the color.
  value     String  // Value associated with the color.
  products  Product[] // Relationship to products.
  createdAt DateTime @default(now()) // Timestamp for when the color was created.
  updatedAt DateTime @updatedAt // Timestamp for when the color was last updated.
}

model Attribute {
  id        String                 @id @default(cuid()) // Unique identifier for the attribute.
  storeId   String
  store     Store                  @relation("StoreToAttribute", fields: [storeId], references: [id]) // Relationship to the store.
  key       String // Attribute name, e.g., "Material", "Dimensions".
  value     String // Attribute value, e.g., "Cotton", "10x20x30cm".
  products  AttributesOnProducts[] // Relationship to products.
  createdAt DateTime               @default(now()) // Timestamp for when the attribute was created.
  updatedAt DateTime               @updatedAt // Timestamp for when the attribute was last updated.
}

// Define the "Product" table/model.
model Product {
  id              String                 @id @default(cuid()) // Unique identifier for the product.
  storeId         String // ID of the store associated with the product.
  store           Store                  @relation("StoreToProduct", fields: [storeId], references: [id]) // Relationship to the store.
  categoryId      String // ID of the associated category.
  category        Category               @relation("CategoryToProduct", fields: [categoryId], references: [id]) // Relationship to the category.
  name            String // Name of the product.
  description     String // Detailed description of the product.
  price           Decimal                @db.Decimal(10, 2) // Price of the product with precision and scale.
  discountPrice   Decimal?               @db.Decimal(10, 2) // Optional discount price of the product with precision and scale.
  discountPercent Decimal?               @db.Decimal(10, 2) // Optional discount percent of the product with precision and scale.
  stockStatus     Boolean                @default(true) // Status of the product inventory.
  stockQuantity   Int // Inventory levels for the product.
  isFeatured      Boolean                @default(false) // Flag indicating if the product is featured.
  isArchived      Boolean                @default(false) // Flag indicating if the product is archived.
  sizeId          String? // ID of the associated size, now optional.
  size            Size?                  @relation(fields: [sizeId], references: [id]) // Optional relationship to the size.
  colorId         String? // ID of the associated color, now optional.
  color           Color?                 @relation(fields: [colorId], references: [id]) // Optional relationship to the color.
  attributes      AttributesOnProducts[] // Relationship to attributes.
  slug            String?
  metaDescription String? // SEO meta description.
  images          Image[] // Relationship to product images.
  orderItems      OrderItem[] // Relationship to order items.
  createdAt       DateTime               @default(now()) // Timestamp for when the product was created.
  updatedAt       DateTime               @updatedAt // Timestamp for when the product was last updated.
}

model AttributesOnProducts {
  id          String    @id @default(cuid()) // Unique identifier for the attribute.
  productId   String
  product     Product   @relation(fields: [productId], references: [id]) // Relationship to the product.
  attributeId String
  attribute   Attribute @relation(fields: [attributeId], references: [id]) // Relationship to the attribute.
  createdAt   DateTime  @default(now()) // Timestamp for when the attribute was created.
  updatedAt   DateTime  @updatedAt // Timestamp for when the attribute was last updated.
}

// Define the "Image" table/model.
model Image {
  id           String   @id @default(cuid()) // Unique identifier for the image.
  productId    String // ID of the associated product.
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade) // Relationship to the product.
  url          String // URL of the image, could be used for the primary or high-resolution image.
  thumbnailUrl String? // URL for the thumbnail-sized version of the image.
  mediumUrl    String? // URL for the medium-sized version of the image.
  altText      String? // Alternative text for the image, enhancing accessibility and SEO.
  imageType    String? // Type of the image, e.g., 'thumbnail', 'gallery', 'zoomed'.
  order        Int? // Order in which the image should appear.
  createdAt    DateTime @default(now()) // Timestamp for when the image was created.
  updatedAt    DateTime @updatedAt // Timestamp for when the image was last updated.
}

// Define the "Order" table/model.
model Order {
  id         String      @id @default(cuid()) // Unique identifier for the order.
  storeId    String // ID of the store associated with the order.
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id]) // Relationship to the store.
  orderItems OrderItem[] // Relationship to order items.
  isPaid     Boolean     @default(false) // Flag indicating if the order is paid.
  phone      String      @default("") // Phone number associated with the order.
  address    String      @default("") // Address associated with the order.
  status     OrderStatus // Status of the order (e.g., processing, shipped, delivered).
  total      Decimal     @default(0) // Total amount of the order.
  createdAt  DateTime    @default(now()) // Timestamp for when the order was created.
  updatedAt  DateTime    @updatedAt // Timestamp for when the order was last updated.
}

// Define the "OrderItem" table/model.
model OrderItem {
  id        String  @id @default(cuid()) // Unique identifier for the order item.
  orderId   String // ID of the associated order.
  order     Order   @relation(fields: [orderId], references: [id]) // Relationship to the order.
  productId String // ID of the associated product.
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade) // Relationship to the product.
  quantity  Int? // Quantity of the product ordered.
  unitPrice Decimal @default(0) // Price of the product per unit at the time of the order.
  createdAt DateTime @default(now()) // Timestamp for when the order item was created.
  updatedAt DateTime @updatedAt // Timestamp for when the order item was last updated.
}

// Define the "OrderStatus" enum.
enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}
